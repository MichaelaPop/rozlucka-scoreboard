// Modified leaderboard and task logic with player avatars
// This file builds upon the original script from the Rozluƒçka scoreboard.
// In addition to tracking task completion and scores, it now knows how to
// display a small circular avatar next to each player's name on the
// leaderboard.  A mapping of player names to their avatar image filenames
// lives at the top of the file.  When rendering the leaderboard we use
// this map to insert an <img> element ahead of the player's name.

// Upraven√Ω seznam √∫kol≈Ø.  Opravili jsme formulace prvn√≠ho a ƒçtvrt√©ho √∫kolu
// tak, aby odpov√≠daly po≈æadovan√Ωm tvar≈Øm, a p≈ôidali jsme dva nov√© √∫koly.
const tasks = [
  // Z√°kladn√≠ seznam √∫kol≈Ø bez textu "(opakovat)".  U opakovateln√Ωch √∫kol≈Ø
  // je p≈ôid√°na subDescription a subPoints pro tvorbu opakovan√Ωch pod√∫kol≈Ø.
  {
    description: "Spoleƒçnƒõ vymysleme jm√©no pro na≈°eho t√Ωpka.",
    points: 5
  },
  {
    description: "Udƒõlejme spoleƒçnou fotku \"P≈ôed\".",
    points: 5
  },
  {
    description: "Vyfo≈• se s nevƒõstou v origin√°ln√≠ p√≥ze.",
    points: 10,
    subDescription: "Udƒõlej si dal≈°√≠ fotku s nevƒõstou.",
    subPoints: 5
  },
  {
    description: "Udƒõlej si crazy fotku s na≈°√≠m t√Ωpkem.",
    points: 15,
    subDescription: "Znovu se vyfo≈• s na≈°√≠m t√Ωpkem.",
    subPoints: 5
  },
  {
    description: "Mƒõj na sobƒõ alespo≈à 15 minut \"Sexy Borat\" triko.",
    points: 45
  },
  {
    description: "Vyvolej u nƒõkoho z√°chvat sm√≠chu.",
    points: 50,
    subDescription: "Rozesmƒõj nƒõkoho dal≈°√≠ho.",
    subPoints: 5
  },
  {
    description: "Vyfo≈• tajnƒõ nejul√≠tlej≈°√≠ outfit veƒçera.",
    points: 20,
    subDescription: "Zachy≈• dal≈°√≠ ≈°√≠len√Ω outfit.",
    subPoints: 5
  },
  {
    description: "Vyfo≈• tajnƒõ nƒõkoho, kdo vypad√° jako zn√°m√° osobnost.",
    points: 20,
    subDescription: "Dal≈°√≠ celebritu pros√≠m.",
    subPoints: 5
  },
  {
    description: "Udƒõlej si selfie s naprost√Ωm cizincem.",
    points: 30,
    subDescription: "Je libo dal≈°√≠ nezn√°m√Ω?",
    subPoints: 5
  },
  {
    description: "Vyfo≈• nejv√≠c sexy t√Ωpka veƒçera.",
    points: 25,
    subDescription: "Sem s dal≈°√≠m t√Ωpkem!",
    subPoints: 5
  },
  {
    description: "Vyfo≈• tajnƒõ holku, kter√° m√° na sobƒõ v√≠c r≈Ø≈æov√© ne≈æ ty.",
    points: 15
  },
  {
    description: "Zachy≈• nejv√≠c znechucen√Ω v√Ωraz veƒçera.",
    points: 20,
    subDescription: "Vyfo≈• dal≈°√≠ znechucen√Ω v√Ωraz.",
    subPoints: 5
  },
  {
    description: "Vyfo≈• n√°hodnou vƒõc, kter√° p≈ôipom√≠n√° penis.",
    points: 25,
    subDescription: "Dal≈°√≠ pind√≠k pros√≠m.",
    subPoints: 5
  },
  {
    description: "Udƒõlejme fotku se ≈°esti Tomy a nevƒõstou.",
    points: 10
  },
  {
    description: "Udƒõlej bl√°znivou selfie s co nejvƒõt≈°√≠m poƒçtem Tom≈Ø.",
    points: 15
  },
  {
    description: "Udƒõlejme spoleƒçnou fotku \"PO\" (p≈ôed odchodem prvn√≠ z n√°s).",
    points: 10
  }
];

// List of players for leaderboard and ranking.  Make sure the order here
// matches the order of the avatar images in the playerImages map below.
const players = ['T√≠nka','M√≠≈°a','M√°ja','Masha','≈Ωaneta','Sussi','Tereza'];

// Map each player's display name to the relative path of their avatar.
// These images live in the `avatars` folder at the root of the project.  If you
// rename your image files you should update the values below accordingly.
const playerImages = {
  'T√≠nka': 'avatars/t√≠nka.png',
  'M√≠≈°a': 'avatars/m√≠≈°a.png',
  'M√°ja': 'avatars/maja.png',
  'Masha': 'avatars/masha.png',
  '≈Ωaneta': 'avatars/≈æaneta.png',
  'Sussi': 'avatars/sussi.png',
  'Tereza': 'avatars/tereza.png'
};

// Calculate maximum points based on tasks list
const maxPoints = tasks.reduce((sum, t) => sum + t.points, 0);

// Retrieve leaderboard data sorted descending
function getLeaderboardData() {
  const data = players.map(name => {
    const score = parseInt(localStorage.getItem(`score_${name}`) || "0", 10);
    return { name, score };
  });
  data.sort((a, b) => b.score - a.score);
  return data;
}

// Initialise an individual player's page.  Builds the checklist of tasks and
// wires up the handlers to update scores and UI on interaction.
function initPage(playerName) {
  const tasksList = document.getElementById("tasks");
  tasksList.innerHTML = "";
  // Pomocn√° funkce pro vytv√°≈ôen√≠ pod√∫kol≈Ø v re≈æimu, kdy se data ukl√°daj√≠
  // do localStorage.  Po splnƒõn√≠ pod√∫kolu se p≈ôiƒçtou body a vygeneruje se
  // dal≈°√≠ pod√∫kol, tak≈æe √∫kol lze plnit opakovanƒõ.
  function createSubTaskElement(task) {
    if (!task.subDescription) return;
    const liSub = document.createElement('li');
    const labelSub = document.createElement('label');
    labelSub.textContent = `${task.subDescription} (${task.subPoints || 5} b.)`;
    const checkboxSub = document.createElement('input');
    checkboxSub.type = 'checkbox';
    checkboxSub.addEventListener('change', () => {
      if (checkboxSub.checked) {
        // P≈ôiƒçti body k dynamick√©mu sk√≥re hr√°ƒçky a ulo≈æ
        const dynKey = `dynamic_${playerName}`;
        let dyn = parseInt(localStorage.getItem(dynKey) || "0", 10);
        dyn += task.subPoints || 5;
        localStorage.setItem(dynKey, dyn);
        // Aktualizuj celkov√© sk√≥re a UI
        updateScore(playerName);
        // Odeber splnƒõn√Ω pod√∫kol z DOMu
        liSub.remove();
        // Vytvo≈ô dal≈°√≠ pod√∫kol
        createSubTaskElement(task);
      }
    });
    liSub.prepend(checkboxSub);
    liSub.appendChild(labelSub);
    tasksList.appendChild(liSub);
  }

  tasks.forEach((task, index) => {
    const li = document.createElement('li');
    const label = document.createElement('label');
    label.textContent = `${task.description} (${task.points} b.)`;
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    const stored = JSON.parse(localStorage.getItem(`tasks_${playerName}`) || "[]");
    // Zjisti, zda byl √∫kol za≈°krtnut d≈ô√≠ve
    checkbox.checked = stored.includes(index);
    checkbox.addEventListener('change', () => {
      const checkedIndices = JSON.parse(localStorage.getItem(`tasks_${playerName}`) || "[]");
      const wasChecked = checkedIndices.includes(index);
      if (checkbox.checked) {
        if (!wasChecked) checkedIndices.push(index);
      } else {
        const idx = checkedIndices.indexOf(index);
        if (idx !== -1) checkedIndices.splice(idx, 1);
      }
      localStorage.setItem(`tasks_${playerName}`, JSON.stringify(checkedIndices));
      updateScore(playerName);
      // Pokud je √∫kol opakovateln√Ω a byl pr√°vƒõ za≈°krtnut poprv√©,
      // vytvo≈ô pod√∫kol
      if (task.subDescription && checkbox.checked && !wasChecked) {
        createSubTaskElement(task);
      }
    });
    li.prepend(checkbox);
    li.appendChild(label);
    tasksList.appendChild(li);
    // Pokud byl √∫kol d≈ô√≠ve za≈°krtnut a je opakovateln√Ω, zobraz rovnou pod√∫kol
    if (task.subDescription && checkbox.checked) {
      createSubTaskElement(task);
    }
  });
  updateScore(playerName);
}

// Update the score for a single player and persist it to localStorage.  Also
// triggers updates to the extra UI (progress bar, motivational message).
function updateScore(playerName) {
  const checkedIndices = JSON.parse(localStorage.getItem(`tasks_${playerName}`) || "[]");
  // Z√°kladn√≠ body za √∫koly
  const basePoints = checkedIndices.reduce((sum, i) => sum + tasks[i].points, 0);
  // Body z√≠skan√© z opakovan√Ωch pod√∫kol≈Ø
  const dynamicPoints = parseInt(localStorage.getItem(`dynamic_${playerName}`) || "0", 10);
  const totalPoints = basePoints + dynamicPoints;
  const scoreEl = document.getElementById('score');
  if (scoreEl) scoreEl.textContent = totalPoints;
  localStorage.setItem(`score_${playerName}`, totalPoints);
  updateExtraUI(playerName);
}

// Update UI elements that depend on a player's current score and ranking.  This
// function updates the player's position message, progress bar and
// motivational text.  It leaves the leaderboard itself alone; the
// leaderboard is refreshed separately by the initLeaderboard function.
function updateExtraUI(playerName) {
  const leaderboard = getLeaderboardData();
  const position = leaderboard.findIndex(item => item.name === playerName) + 1;
  const currentScore = parseInt(localStorage.getItem(`score_${playerName}`) || "0", 10);
  const infoEl = document.getElementById('score-info');
  if (infoEl) {
    let ordinal = `${position}.`;
    infoEl.textContent = `Aktu√°ln√≠ sk√≥re: ${currentScore} bod≈Ø ‚Äì Zat√≠m jsi na ${ordinal} m√≠stƒõ!`;
  }
  // update progress bar
  const progressPercent = Math.min((currentScore / maxPoints) * 100, 100);
  const progressBar = document.getElementById('progress-bar');
  if (progressBar) {
    progressBar.style.width = `${progressPercent}%`;
  }
  // update motivational message
  const motivaceEl = document.getElementById('motivace');
  if (motivaceEl) {
    let message = "";
    // Motivace se mƒõn√≠ podle aktu√°ln√≠ho sk√≥re. P≈ôidali jsme stupe≈à nad 170 bod≈Ø,
    // aby titul ultrapa≈ômenka odpov√≠dal nov√©mu maxim√°ln√≠mu poƒçtu bod≈Ø.
    if (currentScore === 0) {
  message = "Holka, zaƒçni! Tohle nen√≠ kav√°rna.";
} else if (currentScore <= 29) {
  message = "U≈æ to jisk≈ô√≠, ale chce to p≈ôidat!";
} else if (currentScore <= 59) {
  message = "Rozj√≠≈æd√≠≈° to! Jsi na dobr√© cestƒõ ke sl√°vƒõ!";
} else if (currentScore <= 89) {
  message = "U≈æ jsi legenda veƒçera‚Ä¶ skoro!";
} else if (currentScore <= 119) {
  message = "Tohle u≈æ nen√≠ hra. To je tv√° chv√≠le sl√°vy";
} else if (currentScore <= 149) {
  message = "üî• Kr√°lovno chaosu! Ostatn√≠ nest√≠haj√≠!";
} else if (currentScore <= 169) {
  message = "U≈æ m√°≈° pomalu v√≠c bod≈Ø ne≈æ tvoje d≈Østojnost!";
} else if (currentScore <= 199) {
  message = "Nevƒõsta je urƒçitƒõ py≈°n√°‚Ä¶ nebo aspo≈à pobaven√°.";
} else {
  message = "üëë Z√≠sk√°v√°≈° titul korunovan√° ultrapa≈ômenka! üëë";
}
    motivaceEl.textContent = message;
  }
}

// Initialise the leaderboard and keep it up to date.  This function builds
// table rows dynamically using the player list and their scores.  It also
// attaches an event listener to storage events and periodically re-renders
// the table every second.  Each player's avatar is shown before their name.
function initLeaderboard() {
  const tbody = document.querySelector('tbody');
  function render() {
    const data = getLeaderboardData();
    tbody.innerHTML = "";
    data.forEach((item, index) => {
      const tr = document.createElement('tr');
      if (index === 0) {
        tr.classList.add('leader-row');
      }
      // Build a cell that stacks the avatar above the player's name.
      const nameTd = document.createElement('td');
      // Create a wrapper so the avatar sits above the name.  Using a
      // dedicated wrapper allows us to center both elements easily with
      // simple CSS.  The wrapper uses flex column layout defined in
      // styles on index.html.
      const wrapper = document.createElement('div');
      wrapper.classList.add('player-cell');
      const img = document.createElement('img');
      img.src = playerImages[item.name] || '';
      img.alt = item.name;
      img.classList.add('avatar-small');
      const nameSpan = document.createElement('span');
      // Append the crown emoji only for the leader.
      nameSpan.textContent = item.name + (index === 0 ? ' üëë' : '');
      // Assemble wrapper
      wrapper.appendChild(img);
      wrapper.appendChild(nameSpan);
      nameTd.appendChild(wrapper);
      // Score column remains unchanged
      const scoreTd = document.createElement('td');
      scoreTd.textContent = item.score;
      tr.appendChild(nameTd);
      tr.appendChild(scoreTd);
      tbody.appendChild(tr);
    });
  }
  render();
  window.addEventListener('storage', render);
  setInterval(render, 1000);
}
